#!/usr/bin/env python3

import timeit
import cv2
import numpy as np
#local imports
from mat import mir_p, mir_n
from mat_original import mir_p_o, mir_n_o
from mirror import crop_square, blackout, blackout_i, blackout_m
from mirror_original import blackout_o

def test_mirs_img(img):
  
  #original functions
  o_mir_p = mir_p_o(img)
  o_mir_n = mir_n_o(img)
  cv2.imshow('Original mir', o_mir_p)
  cv2.imshow('Original mir2', o_mir_n)
  cv2.waitKey(0)
  o_mir_p_time = timeit.timeit(lambda: mir_p_o(img), number=100)
  o_mir_n_time = timeit.timeit(lambda: mir_n_o(img), number=100)
  print(f"Original mir time: {o_mir_p_time}")
  print(f"Original mir2 time: {o_mir_n_time}")
  
  #optimized functions
  mir_img = mir_p(img)
  mir2_img = mir_n(img)
  cv2.imshow('mir', mir_img)
  cv2.imshow('mir2', mir2_img)
  cv2.waitKey(0)
  mir_time = timeit.timeit(lambda: mir_p(img), number=100)
  mir2_time = timeit.timeit(lambda: mir_n(img), number=100)
  print(f"mir time: {mir_time}")
  print(f"mir2 time: {mir2_time}")

def test_blackout_img(img, numiter=100):
  #original function
  o_blackouttv = blackout_o(img, 'tv')
  o_blackoutbv = blackout_o(img, 'bv')
  o_blackoutlh = blackout_o(img, 'lh')
  o_blackoutrh = blackout_o(img, 'rh')
  o_blackoutbp = blackout_o(img, 'bp')
  o_blackouttp = blackout_o(img, 'tp')
  o_blackoutbn = blackout_o(img, 'bn')
  o_blackouttn = blackout_o(img, 'tn')
  
  cv2.imshow('Original blackout tv', o_blackouttv)
  cv2.waitKey(0)
  cv2.imshow('Original blackout bv', o_blackoutbv)
  cv2.waitKey(0)
  cv2.imshow('Original blackout lh', o_blackoutlh)
  cv2.waitKey(0)
  cv2.imshow('Original blackout rh', o_blackoutrh)
  cv2.waitKey(0)
  cv2.imshow('Original blackout bp', o_blackoutbp)
  cv2.waitKey(0)
  cv2.imshow('Original blackout tp', o_blackouttp)
  cv2.waitKey(0)
  cv2.imshow('Original blackout bn', o_blackoutbn)
  cv2.waitKey(0)
  cv2.imshow('Original blackout tn', o_blackouttn)  
  cv2.waitKey(0)
  
  cv2.destroyAllWindows()
  
  o_blackout_timetv = timeit.timeit(lambda: blackout_o(img, 'tv'), number=numiter)
  o_blackout_timebv = timeit.timeit(lambda: blackout_o(img, 'bv'), number=numiter)
  o_blackout_timelh = timeit.timeit(lambda: blackout_o(img, 'lh'), number=numiter)
  o_blackout_timerh = timeit.timeit(lambda: blackout_o(img, 'rh'), number=numiter)
  o_blackout_timebp = timeit.timeit(lambda: blackout_o(img, 'bp'), number=numiter)
  o_blackout_timetp = timeit.timeit(lambda: blackout_o(img, 'tp'), number=numiter)
  o_blackout_timebn = timeit.timeit(lambda: blackout_o(img, 'bn'), number=numiter)
  o_blackout_timetn = timeit.timeit(lambda: blackout_o(img, 'tn'), number=numiter)
  
  print(f"Original functions for {numiter} iterations (seconds)")
  print(f"Original blackout time tv: {o_blackout_timetv}")
  print(f"Original blackout time bv: {o_blackout_timebv}")
  print(f"Original blackout time lh: {o_blackout_timelh}")
  print(f"Original blackout time rh: {o_blackout_timerh}")
  print(f"Original blackout time bp: {o_blackout_timebp}")
  print(f"Original blackout time tp: {o_blackout_timetp}")
  print(f"Original blackout time bn: {o_blackout_timebn}")
  print(f"Original blackout time tn: {o_blackout_timetn}")
  
  #optimized function
  tv, bv, lh, rh, bp, tp, bn, tn = 0, 1, 2, 3, 4, 5, 6, 7# numba is better with numbers
  blackout_tv = blackout(img, tv)
  blackout_bv = blackout(img, bv)
  blackout_lh = blackout(img, lh)
  blackout_rh = blackout(img, rh)
  blackout_bp = blackout(img, bp)
  blackout_tp = blackout(img, tp)
  blackout_bn = blackout(img, bn)
  blackout_tn = blackout(img, tn)
  
  cv2.imshow('blackout v2 tv', blackout_tv)
  cv2.waitKey(0)
  cv2.imshow('blackout v2 bv', blackout_bv)
  cv2.waitKey(0)
  cv2.imshow('blackout v2 lh', blackout_lh)
  cv2.waitKey(0)
  cv2.imshow('blackout v2 rh', blackout_rh)
  cv2.waitKey(0)
  cv2.imshow('blackout v2 bp', blackout_bp)
  cv2.waitKey(0)
  cv2.imshow('blackout v2 tp', blackout_tp)
  cv2.waitKey(0)
  cv2.imshow('blackout v2 bn', blackout_bn)
  cv2.waitKey(0)
  cv2.imshow('blackout v2 tn', blackout_tn)
  cv2.waitKey(0)
  
  cv2.destroyAllWindows()

  blackout_time_tv = timeit.timeit(lambda: blackout(img, tv), number=numiter)
  blackout_time_bv = timeit.timeit(lambda: blackout(img, bv), number=numiter)
  blackout_time_lh = timeit.timeit(lambda: blackout(img, lh), number=numiter)
  blackout_time_rh = timeit.timeit(lambda: blackout(img, rh), number=numiter)
  blackout_time_bp = timeit.timeit(lambda: blackout(img, bp), number=numiter)
  blackout_time_tp = timeit.timeit(lambda: blackout(img, tp), number=numiter)
  blackout_time_bn = timeit.timeit(lambda: blackout(img, bn), number=numiter)
  blackout_time_tn = timeit.timeit(lambda: blackout(img, tn), number=numiter)
  
  print()
  print(f"Jit compiled functions for {numiter} iterations (seconds)")
  print(f"blackout time tv: {blackout_time_tv}")
  print(f"blackout time bv: {blackout_time_bv}")
  print(f"blackout time lh: {blackout_time_lh}")
  print(f"blackout time rh: {blackout_time_rh}")
  print(f"blackout time bp: {blackout_time_bp}")
  print(f"blackout time tp: {blackout_time_tp}")
  print(f"blackout time bn: {blackout_time_bn}")
  print(f"blackout time tn: {blackout_time_tn}")

  
def test_modified_blackouts(img, numiter=100):
  cp, cpi, cpm = img.copy(), img.copy(), img.copy()
  
  #first partially jit compiled
  tv, bv, lh, rh, bp, tp, bn, tn = 0, 1, 2, 3, 4, 5, 6, 7# numba is better with numbers
  blackouttv0 = blackout(cp, tv)
  blackoutbv0 = blackout(cp, bv)
  blackoutlh0 = blackout(cp, lh)
  blackoutrh0 = blackout(cp, rh)
  blackoutbp0 = blackout(cp, bp)
  blackouttp0 = blackout(cp, tp)
  blackoutbn0 = blackout(cp, bn)
  blackouttn0 = blackout(cp, tn)
  
  cv2.imshow('blackout_v2_tv', blackouttv0)
  cv2.waitKey(0)
  cv2.imshow('blackout_v2_bv', blackoutbv0)
  cv2.waitKey(0)
  cv2.imshow('blackout_v2_lh', blackoutlh0)
  cv2.waitKey(0)
  cv2.imshow('blackout_v2_rh', blackoutrh0)
  cv2.waitKey(0)
  cv2.imshow('blackout_v2_bp', blackoutbp0)
  cv2.waitKey(0)
  cv2.imshow('blackout_v2_tp', blackouttp0)
  cv2.waitKey(0)
  cv2.imshow('blackout_v2_bn', blackoutbn0)
  cv2.waitKey(0)
  cv2.imshow('blackout_v2_tn', blackouttn0)
  cv2.waitKey(0)
  
  cv2.destroyAllWindows()
  
  blackout_time_tv0 = timeit.timeit(lambda: blackout(cp, tv), number=numiter)
  blackout_time_bv0 = timeit.timeit(lambda: blackout(cp, bv), number=numiter)
  blackout_time_lh0 = timeit.timeit(lambda: blackout(cp, lh), number=numiter)
  blackout_time_rh0 = timeit.timeit(lambda: blackout(cp, rh), number=numiter)
  blackout_time_bp0 = timeit.timeit(lambda: blackout(cp, bp), number=numiter)
  blackout_time_tp0 = timeit.timeit(lambda: blackout(cp, tp), number=numiter)
  blackout_time_bn0 = timeit.timeit(lambda: blackout(cp, bn), number=numiter)
  blackout_time_tn0 = timeit.timeit(lambda: blackout(cp, tn), number=numiter)
  
  print()
  print(f"blackoutv2 (partially jit compiled) for {numiter} iterations (seconds)")
  print(f"blackout time tv: {blackout_time_tv0}")
  print(f"blackout time bv: {blackout_time_bv0}")
  print(f"blackout time lh: {blackout_time_lh0}")
  print(f"blackout time rh: {blackout_time_rh0}")
  print(f"blackout time bp: {blackout_time_bp0}")
  print(f"blackout time tp: {blackout_time_tp0}")
  print(f"blackout time bn: {blackout_time_bn0}")
  print(f"blackout time tn: {blackout_time_tn0}")
  
  #fully jit compiled, mutates the image
  blackouttv_m = blackout_m(cpi, tv)
  blackoutbv_m = blackout_m(cpi, bv)
  blackoutlh_m = blackout_m(cpi, lh)
  blackoutrh_m = blackout_m(cpi, rh)
  blackoutbp_m = blackout_m(cpi, bp)
  blackouttp_m = blackout_m(cpi, tp)
  blackoutbn_m = blackout_m(cpi, bn)
  blackouttn_m = blackout_m(cpi, tn)
  
  cv2.imshow('blackout_m_tv', blackouttv_m)
  cv2.waitKey(0)
  cv2.imshow('blackout_m_bv', blackoutbv_m)
  cv2.waitKey(0)
  cv2.imshow('blackout_m_lh', blackoutlh_m)
  cv2.waitKey(0)
  cv2.imshow('blackout_m_rh', blackoutrh_m)
  cv2.waitKey(0)
  cv2.imshow('blackout_m_bp', blackoutbp_m)
  cv2.waitKey(0)
  cv2.imshow('blackout_m_tp', blackouttp_m)
  cv2.waitKey(0)
  cv2.imshow('blackout_m_bn', blackoutbn_m)
  cv2.waitKey(0)
  cv2.imshow('blackout_m_tn', blackouttn_m)
  cv2.waitKey(0)
  
  cv2.destroyAllWindows()
  
  blackout_time_tv_m = timeit.timeit(lambda: blackout_m(cpi, tv), number=numiter)
  blackout_time_bv_m = timeit.timeit(lambda: blackout_m(cpi, bv), number=numiter)
  blackout_time_lh_m = timeit.timeit(lambda: blackout_m(cpi, lh), number=numiter)
  blackout_time_rh_m = timeit.timeit(lambda: blackout_m(cpi, rh), number=numiter)
  blackout_time_bp_m = timeit.timeit(lambda: blackout_m(cpi, bp), number=numiter)
  blackout_time_tp_m = timeit.timeit(lambda: blackout_m(cpi, tp), number=numiter)
  blackout_time_bn_m = timeit.timeit(lambda: blackout_m(cpi, bn), number=numiter)
  blackout_time_tn_m = timeit.timeit(lambda: blackout_m(cpi, tn), number=numiter)
  
  print()
  print(f"blackoutv3_m (fully jit, mutates) for {numiter} iterations (seconds)")
  print(f"blackout time tv: {blackout_time_tv_m}")
  print(f"blackout time bv: {blackout_time_bv_m}")
  print(f"blackout time lh: {blackout_time_lh_m}")
  print(f"blackout time rh: {blackout_time_rh_m}")
  print(f"blackout time bp: {blackout_time_bp_m}")
  print(f"blackout time tp: {blackout_time_tp_m}")
  print(f"blackout time bn: {blackout_time_bn_m}")
  print(f"blackout time tn: {blackout_time_tn_m}")
  
  #fully jit compiled, immutable
  blackouttv_i = blackout_i(cpm, tv)
  blackoutbv_i = blackout_i(cpm, bv)
  blackoutlh_i = blackout_i(cpm, lh)
  blackoutrh_i = blackout_i(cpm, rh)
  blackoutbp_i = blackout_i(cpm, bp)
  blackouttp_i = blackout_i(cpm, tp)
  blackoutbn_i = blackout_i(cpm, bn)
  blackouttn_i = blackout_i(cpm, tn)
  
  cv2.imshow('blackout_i_tv', blackouttv_i)
  cv2.waitKey(0)
  cv2.imshow('blackout_i_bv', blackoutbv_i)
  cv2.waitKey(0)
  cv2.imshow('blackout_i_lh', blackoutlh_i)
  cv2.waitKey(0)
  cv2.imshow('blackout_i_rh', blackoutrh_i)
  cv2.waitKey(0)
  cv2.imshow('blackout_i_bp', blackoutbp_i)
  cv2.waitKey(0)
  cv2.imshow('blackout_i_tp', blackouttp_i)
  cv2.waitKey(0)
  cv2.imshow('blackout_i_bn', blackoutbn_i)
  cv2.waitKey(0)
  cv2.imshow('blackout_i_tn', blackouttn_i)
  cv2.waitKey(0)
  
  cv2.destroyAllWindows()
  
  blackout_time_tv_i = timeit.timeit(lambda: blackout_i(cpm, tv), number=numiter)
  blackout_time_bv_i = timeit.timeit(lambda: blackout_i(cpm, bv), number=numiter)
  blackout_time_lh_i = timeit.timeit(lambda: blackout_i(cpm, lh), number=numiter)
  blackout_time_rh_i = timeit.timeit(lambda: blackout_i(cpm, rh), number=numiter)
  blackout_time_bp_i = timeit.timeit(lambda: blackout_i(cpm, bp), number=numiter)
  blackout_time_tp_i = timeit.timeit(lambda: blackout_i(cpm, tp), number=numiter)
  blackout_time_bn_i = timeit.timeit(lambda: blackout_i(cpm, bn), number=numiter)
  blackout_time_tn_i = timeit.timeit(lambda: blackout_i(cpm, tn), number=numiter)
  
  print()
  print(f"blackoutv3_i (fully jit, immutable) for {numiter} iterations (seconds)")
  print(f"blackout time tv: {blackout_time_tv_i}")
  print(f"blackout time bv: {blackout_time_bv_i}")
  print(f"blackout time lh: {blackout_time_lh_i}")
  print(f"blackout time rh: {blackout_time_rh_i}")
  print(f"blackout time bp: {blackout_time_bp_i}")
  print(f"blackout time tp: {blackout_time_tp_i}")
  print(f"blackout time bn: {blackout_time_bn_i}")
  print(f"blackout time tn: {blackout_time_tn_i}")
  
  

def main():
  img = cv2.imread('src_imgs/landscape.jpg')
  img = crop_square(img)
  # img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  cv2.imshow('Original Image', img)
  cv2.waitKey(0)
  #test_mirs_img(img)
  test_blackout_img(img, numiter=1)
  #test_modified_blackouts(img)
  

if __name__ == "__main__":
  main()